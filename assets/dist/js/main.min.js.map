{"version":3,"sources":["main.min.js"],"names":["document","addEventListener","imageItemsWrap","querySelector","e","clickElement","target","className","parentElement","classList","toggle","blockLesson2","coordinatesBlock2","blockX","offsetX","blockY","offsetY","innerHTML","decorClasses","decorBlock","removeAttribute","add","style","backgroundColor","color","i","Math","floor","random","length","getRandomColor","bloksWpIn4","querySelectorAll","blocksIn4","elementsIndex","elementsIndexAfter","bloksWpInfo","array","str","z","children","textContent","removeChild","appendChild","insertBefore","cloneNode"],"mappings":"AAAA,aAYAA,SAASC,iBAAiB,mBAAoB,WAK9C,IAAIC,EAAiBF,SAASG,cAAc,uBAM5CD,EAAeD,iBAAiB,QAAS,SAAUG,GAC/C,IAAIC,EAAeD,EAAEE,OANJ,iBAOWD,EAAaE,WAKrCF,EAAaG,cAAcC,UAAUC,OAXvB,cAmBtB,IAAIC,EAAeX,SAASG,cAAc,oBACtCS,EAAoBZ,SAASG,cAAc,0BAU/CQ,EAAaV,iBAAiB,YAAa,SAASG,GAChD,IAAIS,EAAST,EAAEU,QACXC,EAASX,EAAEY,QAEfJ,EAAkBK,UAAY,UAAYJ,EAAU,WAAaE,IAOrE,IAAIG,EAAe,CACf,WACA,UACA,SACA,cAKAC,EAAanB,SAASG,cAAc,oBAKxCgB,EAAWlB,iBAAiB,QAAS,SAAyBG,GAC1De,EAAWC,gBAAgB,SAC3BD,EAAWV,UAAUY,IARI,mBASzBF,EAAWG,MAAMC,gBAiBrB,WAKI,IAJA,IACIC,EAAQ,IAGHC,EAAI,EAAGA,EAAI,EAAGA,IAEnBD,GANU,mBAMOE,KAAKC,MAAMD,KAAKE,SANvB,mBAM0CC,SAExD,OAAOL,EA1B4BM,GACnCX,EAAWV,UAAUY,IAUEH,EAAaQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAaW,YAoBhF,IAAIE,EAAa/B,SAASgC,iBAAiB,wBACvCC,EAAYjC,SAASgC,iBAAiB,oBACtCE,EAAgBlC,SAASG,cAAc,4BACvCgC,EAAqBnC,SAASG,cAAc,kCA0ChD,SAASiC,EAAYC,GACjB,IAAIC,EAAM,GAGV,IAAK,IAAIb,EAAI,EAAGA,EAAIY,EAAMR,OAAQJ,IAAK,CAEnCa,GAAO,MAAQb,EAAI,KAAOY,EAAMZ,GAAGlB,UAAY,WAG/C,IAAK,IAAIgC,EAAI,EAAGA,EAAIF,EAAMZ,GAAGe,SAASX,OAAQU,IAE1CD,GAAOD,EAAMZ,GAAGe,SAASD,GAAGE,YAAc,IAAMJ,EAAMZ,GAAGe,SAASD,GAAG9B,UAAU,GAAK,OAExF6B,GAAO,OAEX,OAAOA,EApDXJ,EAAcjB,UAAYmB,EAAYL,GAItCA,EAAW,GAAGW,YAAYT,EAAU,IAGpCF,EAAW,GAAGY,YAAYV,EAAU,IAIpCF,EAAW,GAAGa,aAAaX,EAAU,GAAIA,EAAU,IAInDF,EAAW,GAAGY,YAAYV,EAAU,GAAGY,aAIvCd,EAAW,GAAGY,YAAYV,EAAU,GAAGY,WAAU,IAKjDV,EAAmBlB,UAAYmB,EAAYL,KA+BvC","file":"main.min.js","sourcesContent":["\"use strict\";\r\n\r\n// Подключение всех js-файлов\r\n\r\n\r\n\r\n// Подключение бибилиотек\r\n// ('assets/src/js/_libs/jquery.js')                      // jquery 3.3.1\r\n// ('assets/src/js/_libs/slick.js')                       // slick slider 1.8.1\r\n\r\n\r\n// Мой код\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // При нажатии на картинку блока, этот блок выделяется\r\n// (если поставить обработчик на сам блок, то это не сработает, т.к. картинка перекрывает собой весь блок)\r\n\r\n\r\nvar imageItemsWrap = document.querySelector('.lesson-1__img-list'), // Родительский блок (ul) элементов, к которым будут применяться стили\r\n    imageItemClass = 'lesson-1__img', // Класс картинок, содержащихся в блоках, к которым будут применяться стили\r\n    selectItemClass = 'bordered'; // класс, который будет добавляться при клике на элемент\r\n\r\n\r\n// При нажатии на блок \r\nimageItemsWrap.addEventListener('click', function (e) {\r\n    let clickElement = e.target, // Элемент, на который нажимаем\r\n        clickElementClassName = clickElement.className; // Класс элемента, на который нажимаем \r\n    \r\n    // Если нажали на картинку блока, к которому будет применяться стили\r\n    if(clickElementClassName == imageItemClass) {\r\n        // добавить/удалить класс родительскому элементу картинки \r\n        clickElement.parentElement.classList.toggle(selectItemClass);\r\n    }\r\n});\r\n\r\n   // lesson-1 \r\n    \r\n// Координаты курсора относительно блока во втором section\r\n\r\nvar blockLesson2 = document.querySelector('.lesson-2__block'), // Блок\r\n    coordinatesBlock2 = document.querySelector('.lesson-2__coordinates'); // Куда будут записаны координаты\r\n\r\n\r\n/**\r\n * Если провести курсором мыши по блоку, то в параграфе под блоком будут показаны\r\n * координаты курсора относительно границ этого блока \r\n * @param  {} mousemove [обрабатываемое событие]\r\n * @param  {} blockX [Координаты относительно блока по оси Y]\r\n * @param  {} blockY [Координаты относительно блока по оси Y]\r\n */\r\nblockLesson2.addEventListener(\"mousemove\", function(e){\r\n    let blockX = e.offsetX, // Координаты относительно блока по оси Y\r\n        blockY = e.offsetY; // Координаты относительно блока по оси Y\r\n\r\n    coordinatesBlock2.innerHTML = 'Left = ' + blockX  + ', Top = ' + blockY;\r\n});   // lesson-2 \r\n    // При надатии на блок, ему добавляется случайное оформление\r\n\r\n\r\n// Массив классов для декора блока\r\n// У каждого класса прописаны стили в css\r\nvar decorClasses = [\r\n    'bordered',\r\n    'opacity',\r\n    'shadow',\r\n    'bordered-2'\r\n];\r\n\r\n\r\nvar decorBlockDefaultClass = 'lesson-3__block', // Стандартный класс блока\r\n    decorBlock = document.querySelector('.' + decorBlockDefaultClass); // Блок, клик по которому будет обрабатываться\r\n\r\n/**\r\n * При нажатии на блок, ему добавляется случайный класс из массива decorClasses\r\n */\r\ndecorBlock.addEventListener('click', function clickDecorBlock(e) {\r\n    decorBlock.removeAttribute('class'); // Удалить все классы у блока\r\n    decorBlock.classList.add(decorBlockDefaultClass); // Добавить изначальный класс блока\r\n    decorBlock.style.backgroundColor = getRandomColor(); // Установить случайный цвет фона \r\n    decorBlock.classList.add(radromDecorClass()); // Добавить блоку случайный класс из массива\r\n});\r\n\r\n\r\n/**\r\n * Получить случайное значение из массива слассов для декора блока\r\n * @param  {} radromDecorClass [Случайное значение из массива decorClasses]\r\n */\r\nfunction radromDecorClass() {\r\n    // decorClasses[отбросить значения после запятой(случайное число от 0 до 1 * длина массива)]\r\n    let radromDecorClass = decorClasses[Math.floor(Math.random() * decorClasses.length)];\r\n\r\n    return radromDecorClass;\r\n};\r\n\r\n// Генератор случайного цвета\r\nfunction getRandomColor() {\r\n    var letters = '0123456789ABCDEF'; // возможные буквенные значения в цвете\r\n    var color = '#'; // сюда будет записан итоговый цвет\r\n\r\n    // цвет состоит из 6 букв\r\n    for (var i = 0; i < 6; i++) {\r\n        // в переменную записывается одна случайная буква из массива\r\n        color += letters[Math.floor(Math.random() * letters.length)];\r\n    }\r\n    return color;\r\n};   // lesson-3 \r\n    \r\n// Перемещение элементов внури родительских блоков\r\n\r\nvar bloksWpIn4 = document.querySelectorAll('.lesson-4__blocks-wp'), // Массив родительских блоков \r\n    blocksIn4 = document.querySelectorAll('.lesson-4__block'), // Массив дочерних элементов блоков \r\n    elementsIndex = document.querySelector('.lesson-4__elementsIndex'), // Параграф для записи данных ДО перестановок\r\n    elementsIndexAfter = document.querySelector('.lesson-4__elementsIndex-after'); // Параграф для записи данных ПОСЛЕ перестановок\r\n\r\n\r\n// Записать в параграф список дочерних элементов блоков ДО всех перестановок\r\n// в виде \"i: className\", где i - index элемента\r\nelementsIndex.innerHTML = bloksWpInfo(bloksWpIn4);\r\n\r\n\r\n// Удалить 0 элемент из 0 блока \r\nbloksWpIn4[0].removeChild(blocksIn4[0]);\r\n\r\n// Перенести 2 элемент во 1 блок в конец\r\nbloksWpIn4[1].appendChild(blocksIn4[1]);\r\n\r\n// Перенести 7 элемент из 1 блока в 0 блок\r\n// insertBefore(какой элемент перенести, перед каким элементов поставить)\r\nbloksWpIn4[0].insertBefore(blocksIn4[7], blocksIn4[3]);\r\n\r\n// Перенести в 0 блок клон 9 элемента\r\n// поставить его в конец\r\nbloksWpIn4[0].appendChild(blocksIn4[9].cloneNode());\r\n\r\n// Перенести в 0 блок клон 9 элемента и всех его дочерних элементов\r\n// поставить его в конец\r\nbloksWpIn4[0].appendChild(blocksIn4[9].cloneNode(true));\r\n\r\n\r\n// Записать в параграф список дочерних элементов блоков ПОСЛЕ всех перестановок \r\n// в виде \"i: className\", где i - index элемента\r\nelementsIndexAfter.innerHTML = bloksWpInfo(bloksWpIn4);\r\n\r\n\r\n\r\n/**\r\n * Перебор массива родительских блоков и массива их дочерних элементов и запись данных в строку\r\n * Возвращает строку, содержащую:\r\n * i: класс блока (i - порядковый номер блока в массиве)\r\n * z класс дочернего блока (z - содержимое элемента (текст внутри))\r\n * @param  {} array [массив, принимаемый в качестве параметра]\r\n * @param  {} str [строка, куда записываются данные об элементах массива]\r\n * @param  {} return str\r\n */\r\nfunction bloksWpInfo(array) {\r\n    let str = ''; // строка, куда записываются данные об элементах массива\r\n\r\n    // перебрать все элементы массива родительских блоков\r\n    for (let i = 0; i < array.length; i++) {\r\n        // записать в str index блока и название класса\r\n        str += '<b>' + i + ': ' + array[i].className + '</b>' + '<br>';\r\n\r\n        // пеербрать массив дочерних элементов этого родительского блока\r\n        for (let z = 0; z < array[i].children.length; z++) {\r\n            // записать в строку index элемента и его второй класс в списке классов\r\n            str += array[i].children[z].textContent + ' ' + array[i].children[z].classList[1] + '<br>';\r\n        }\r\n        str += '<br>';\r\n    }\r\n    return str;\r\n};   // lesson-4 \r\n\r\n }, false);\r\n\r\n\r\n"]}